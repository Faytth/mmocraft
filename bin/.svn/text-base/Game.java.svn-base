import java.awt.*;

import java.awt.event.*;

import net.java.games.jogl.*;


public class Game
{
    static class InputListener implements 
    	GLEventListener, KeyListener, MouseListener
    {
    	/** Called by the drawable to initiate OpenGL rendering by the client.
         * After all GLEventListeners have been notified of a display event, the
         * drawable will swap its buffers if necessary.
         * @param gLDrawable The GLDrawable object.
         */   
        public void display(GLDrawable gLDrawable)
        {
          final GL gl = gLDrawable.getGL();
          gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
          gl.glLoadIdentity();
        }
        
        /** Called by the drawable immediately after the OpenGL context is
         * initialized for the first time. Can be used to perform one-time OpenGL
         * initialization such as setup of lights and display lists.
         * @param gLDrawable The GLDrawable object.
         */
        public void init(GLDrawable gLDrawable)
        {
            final GL gl = gLDrawable.getGL();
            gl.glShadeModel(GL.GL_SMOOTH);              // Enable Smooth Shading
            gl.glClearColor(0.0f, 0.0f, 0.0f, 0.5f);    // Black Background
            gLDrawable.addKeyListener(this);
            gLDrawable.addMouseListener(this);
            System.out.print("init(GLDrawable glDrawable)");
         }
         
         /** Called by the drawable during the first repaint after the component has
          * been resized. The client can update the viewport and view volume of the
          * window appropriately, for example by a call to
          * GL.glViewport(int, int, int, int); note that for convenience the component
          * has already called GL.glViewport(int, int, int, int)(x, y, width, height)
          * when this method is called, so the client may not have to do anything in
          * this method.
          * @param gLDrawable The GLDrawable object.
          * @param x The X Coordinate of the viewport rectangle.
          * @param y The Y coordinate of the viewport rectanble.
          * @param width The new width of the window.
          * @param height The new height of the window.
          */
        public void reshape(GLDrawable gLDrawable, int x, int y, int width, int height)
        {
            final GL gl = gLDrawable.getGL();
            final GLU glu = gLDrawable.getGLU();
       
            if (height <= 0) // avoid a divide by zero error!
                height = 1;
            final float h = (float)width / (float)height;
            gl.glViewport(0, 0, width, height);
            gl.glMatrixMode(GL.GL_PROJECTION);
            gl.glLoadIdentity();
            glu.gluPerspective(45.0f, h, 1.0, 20.0);
            gl.glMatrixMode(GL.GL_MODELVIEW);
            gl.glLoadIdentity();
        }
         
         /** Invoked when a key has been pressed.
          * See the class description for {@link KeyEvent} for a definition of
          * a key pressed event.
          * @param e The KeyEvent.
          */
        public void keyPressed(KeyEvent e)
        {
//            if (e.getKeyCode() == KeyEvent.VK_ESCAPE)
//                System.exit(0);
        	System.out.print(e.getKeyCode());
        }
         
         /** Invoked when a key has been released.
          * See the class description for {@link KeyEvent} for a definition of
          * a key released event.
          * @param e The KeyEvent.
          */
        public void keyReleased(KeyEvent e) {}
        
         /** Invoked when a key has been typed.
          * See the class description for {@link KeyEvent} for a definition of
          * a key typed event.
          * @param e The KeyEvent.
          */
        public void keyTyped(KeyEvent e) {
        }

		@Override
		public void mouseClicked(MouseEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseEntered(MouseEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent arg0) {
			// TODO Auto-generated method stub
		}

		@Override
		public void mouseReleased(MouseEvent arg0) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void displayChanged(GLDrawable arg0, boolean arg1, boolean arg2) {
			// TODO Auto-generated method stub
			
		}
    }
	
    public static void main(String[] args)
    {
	    Frame frame = new Frame("Daemoncraft");
	    GLCanvas canvas = GLDrawableFactory.getFactory().createGLCanvas(new GLCapabilities());
	    canvas.addGLEventListener(new InputListener());
	    
	    frame.add(canvas);
	    frame.setSize(640, 480);
	    frame.setBackground(Color.black);
	    frame.addWindowListener(new WindowAdapter()
	    {
	    	// On close
	        public void windowClosing(WindowEvent e)
	        {
	            System.exit(0);
	        }
	    });
	 
	     frame.show();
	     canvas.requestFocus();
    }
}